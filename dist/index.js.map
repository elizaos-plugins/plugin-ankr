{
  "version": 3,
  "sources": [
    "../src/index.ts",
    "../src/environment.ts",
    "../src/actions/actionGetTokenHoldersCount.ts",
    "../src/error/base.ts",
    "../src/validator/apiParseValidation.ts",
    "../src/actions/actionGetTokenPrice.ts",
    "../src/actions/actionGetTokenTransfers.ts",
    "../src/actions/actionGetAccountBalance.ts",
    "../src/actions/actionGetTransactionsByAddress.ts",
    "../src/actions/actionGetTransactionsByHash.ts",
    "../src/actions/actionGetBlockchainStats.ts",
    "../src/actions/actionGetCurrencies.ts",
    "../src/actions/actionGetInteractions.ts",
    "../src/actions/actionGetNFTHolders.ts",
    "../src/actions/actionGetNFTTransfers.ts",
    "../src/actions/actionGetNFTMetadata.ts",
    "../src/actions/actionGetNFTsByOwner.ts"
  ],
  "sourcesContent": [
    "import { Plugin } from \"@elizaos/core\";\nimport chalk from 'chalk';\nimport Table from 'cli-table3';\nimport ora from 'ora';\nimport { getConfig } from \"./environment\";\nimport { actionGetTokenHoldersCount } from \"./actions/actionGetTokenHoldersCount\";\nimport { actionGetTokenPrice } from \"./actions/actionGetTokenPrice\";\nimport { actionGetTokenTransfers } from \"./actions/actionGetTokenTransfers\";\nimport { actionGetAccountBalance } from \"./actions/actionGetAccountBalance\";\nimport { actionGetTransactionsByAddress } from \"./actions/actionGetTransactionsByAddress\";\nimport { actionGetTransactionsByHash } from \"./actions/actionGetTransactionsByHash\";\nimport { actionGetBlockchainStats } from \"./actions/actionGetBlockchainStats\";\nimport { actionGetCurrencies } from \"./actions/actionGetCurrencies\";\nimport { actionGetInteractions } from \"./actions/actionGetInteractions\";\nimport { actionGetNFTHolders } from \"./actions/actionGetNFTHolders\";\nimport { actionGetNFTTransfers } from \"./actions/actionGetNFTTransfers\";\nimport { actionGetNFTMetadata } from \"./actions/actionGetNFTMetadata\";\nimport { actionGetNFTsByOwner } from \"./actions/actionGetNFTsByOwner\";\n\n\n\n// Start the loader\nconst spinner = ora({\n    text: chalk.cyan('Initializing ANKR Plugin...'),\n    spinner: 'dots12',\n    color: 'cyan'\n  }).start();\n\nconst actions = [\n    actionGetTokenHoldersCount,\n    actionGetTokenPrice,\n    actionGetTokenTransfers,\n    actionGetAccountBalance,\n    actionGetTransactionsByAddress,\n    actionGetTransactionsByHash,\n    actionGetBlockchainStats,\n    actionGetCurrencies,\n    actionGetInteractions,\n    actionGetNFTHolders,\n    actionGetNFTTransfers,\n    actionGetNFTMetadata,\n    actionGetNFTsByOwner,\n];\n\n// Get NVIDIA_NIM_SPASH from config\nconst ANKR_SPASH = getConfig().ANKR_API_KEY;\n\n// Initial banner\n// Only show splash screen if NVIDIA_NIM_SPASH is true\nif (ANKR_SPASH) {\n    // Initial banner with chalk styling\n    console.log(`\\n${chalk.cyan('┌────────────────────────────────────────┐')}`);\n    console.log(chalk.cyan('│') + chalk.yellow.bold('          ANKR PLUGIN             ') + chalk.cyan(' │'));\n    console.log(chalk.cyan('├────────────────────────────────────────┤'));\n    console.log(chalk.cyan('│') + chalk.white('  Initializing ANKR Services...    ') + chalk.cyan('│'));\n    console.log(chalk.cyan('│') + chalk.white('  Version: 1.0.0                        ') + chalk.cyan('│'));\n    console.log(chalk.cyan('└────────────────────────────────────────┘'));\n\n    // Stop the loader\n    spinner.succeed(chalk.green('ANKR Plugin initialized successfully!'));\n\n    // Create a beautiful table for actions\n    const actionTable = new Table({\n      head: [\n        chalk.cyan('Action'),\n        chalk.cyan('H'),\n        chalk.cyan('V'),\n        chalk.cyan('E'),\n        chalk.cyan('Similes')\n      ],\n      style: {\n        head: [],\n        border: ['cyan']\n      }\n    });\n\n    // Format and add action information\n    for (const action of actions) {\n        actionTable.push([\n            chalk.white(action.name),\n            typeof action.handler === 'function' ? chalk.green('✓') : chalk.red('✗'),\n            typeof action.validate === 'function' ? chalk.green('✓') : chalk.red('✗'),\n            action.examples?.length > 0 ? chalk.green('✓') : chalk.red('✗'),\n            chalk.gray(action.similes?.join(', ') || 'none')\n        ]);\n    }\n\n    // Display the action table\n    console.log(`\\n${actionTable.toString()}`);\n\n    // Plugin status with a nice table\n    const statusTable = new Table({\n      style: {\n        border: ['cyan']\n      }\n    });\n\n    statusTable.push(\n      [chalk.cyan('Plugin Status')],\n      [chalk.white('Name    : ') + chalk.yellow('plugin-ankr')],\n      [chalk.white('Actions : ') + chalk.green(actions.length.toString())],\n      [chalk.white('Status  : ') + chalk.green('Loaded & Ready')]\n    );\n\n    console.log(`\\n${statusTable.toString()}\\n`);\n  } else {\n    // Stop the loader silently if splash is disabled\n    spinner.stop();\n  }\n\n  const ankrPlugin: Plugin = {\n    name: \"plugin-ankr\",\n    description: \"Ankr Plugin for web3\",\n    actions: actions,\n    evaluators: []\n  };\n\nexport { ankrPlugin };\nexport default ankrPlugin;\n",
    "import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\n// Environment Variables\nlet ENV= \"production\";\n\n// ANKR API Configuration\nexport const ANKR_ENDPOINTS = {\n    production: {\n        multichain: \"https://rpc.ankr.com/multichain/\",\n    },\n\n} as const;\n\nexport const ankrEnvSchema = z.object({\n    // API Configuration\n    ANKR_ENV: z.enum([\"production\", \"staging\"]).default(\"production\"),\n    ANKR_API_KEY: z.string().min(1, \"ANKR_API_KEY is required\"),\n\n    // Request Configuration\n    ANKR_MAX_RETRIES: z.string().transform(Number).default(\"3\"),\n    ANKR_RETRY_DELAY: z.string().transform(Number).default(\"1000\"),\n    ANKR_TIMEOUT: z.string().transform(Number).default(\"5000\"),\n\n    // Logging Configuration\n    ANKR_GRANULAR_LOG: z.boolean().default(true),\n    ANKR_LOG_LEVEL: z.enum([\"error\", \"warn\", \"info\", \"debug\"]).default(\"info\"),\n\n    // Runtime Configuration\n    ANKR_RUNTIME_CHECK_MODE: z.boolean().default(false),\n    ANKR_SPASH: z.boolean().default(false)\n});\n\nexport type ankrConfig = z.infer<typeof ankrEnvSchema>;\n\nexport function getConfig(\n    env: string | undefined | null = ENV ||\n        process.env.ANKR_ENV\n): ankrConfig {\n    ENV = env || \"production\";\n\n    return {\n        ANKR_ENV: (env as \"production\" | \"staging\") || \"production\",\n        ANKR_API_KEY: process.env.ANKR_API_KEY || \"\",\n        ANKR_MAX_RETRIES: Number(process.env.ANKR_MAX_RETRIES || \"3\"),\n        ANKR_RETRY_DELAY: Number(process.env.ANKR_RETRY_DELAY || \"1000\"),\n        ANKR_TIMEOUT: Number(process.env.ANKR_TIMEOUT || \"5000\"),\n        ANKR_GRANULAR_LOG: process.env.ANKR_GRANULAR_LOG === \"true\" || false,\n        ANKR_LOG_LEVEL: (process.env.ANKR_LOG_LEVEL as \"error\" | \"warn\" | \"info\" | \"debug\") || \"info\",\n        ANKR_RUNTIME_CHECK_MODE: process.env.RUNTIME_CHECK_MODE === \"true\" || false,\n        ANKR_SPASH: process.env.ANKR_SPASH === \"true\" || false\n    };\n}\n\nexport async function validateankrConfig(\n    runtime: IAgentRuntime\n): Promise<ankrConfig> {\n    try {\n        const envConfig = getConfig(\n            runtime.getSetting(\"ankr_ENV\") ?? undefined\n        );\n\n        const config = {\n            ANKR_ENV: process.env.ANKR_ENV || runtime.getSetting(\"ANKR_ENV\") || envConfig.ANKR_ENV,\n            ANKR_API_KEY: process.env.ANKR_API_KEY || runtime.getSetting(\"ANKR_API_KEY\") || envConfig.ANKR_API_KEY,\n            ANKR_MAX_RETRIES: process.env.ANKR_MAX_RETRIES || runtime.getSetting(\"ANKR_MAX_RETRIES\") || envConfig.ANKR_MAX_RETRIES.toString(),\n            ANKR_RETRY_DELAY: process.env.ANKR_RETRY_DELAY || runtime.getSetting(\"ANKR_RETRY_DELAY\") || envConfig.ANKR_RETRY_DELAY.toString(),\n            ANKR_TIMEOUT: process.env.ANKR_TIMEOUT || runtime.getSetting(\"ANKR_TIMEOUT\") || envConfig.ANKR_TIMEOUT.toString(),\n            ANKR_GRANULAR_LOG: process.env.ANKR_GRANULAR_LOG === \"true\" || false,\n            ANKR_LOG_LEVEL: process.env.ANKR_LOG_LEVEL || runtime.getSetting(\"ANKR_LOG_LEVEL\") || envConfig.ANKR_LOG_LEVEL,\n            ANKR_RUNTIME_CHECK_MODE: process.env.RUNTIME_CHECK_MODE === \"true\" || false,\n            ANKR_SPASH: process.env.ANKR_SPASH === \"true\" || false\n        };\n\n        return ankrEnvSchema.parse(config);\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        throw new Error(`Failed to validate ANKR configuration: ${errorMessage}`);\n    }\n}\n\n// Export endpoints configuration\nexport const getEndpoints = (env: string = ENV) =>\n    ANKR_ENDPOINTS[env as keyof typeof ANKR_ENDPOINTS];\n\n// Helper to get full endpoint URL\nexport function getEndpointUrl(endpoint: string, env: string = ENV): string {\n    const endpoints = getEndpoints(env);\n    const parts = endpoint.split('.');\n    let current: Record<string, unknown> = endpoints;\n\n    for (const part of parts) {\n        if (current[part] === undefined) {\n            throw new Error(`Invalid endpoint path: ${endpoint}`);\n        }\n        current = current[part] as Record<string, unknown>;\n    }\n\n    if (typeof current !== 'string') {\n        throw new Error(`Invalid endpoint path: ${endpoint}`);\n    }\n\n    return current;\n}",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetTokenHoldersCount] ${message}`, data);\n        console.log(`[GetTokenHoldersCount] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetTokenHoldersCountContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        contractAddress?: string;\n    };\n    success?: boolean;\n    data?: {\n        blockchain: string;\n        contractAddress: string;\n        tokenDecimals: number;\n        holderCountHistory: Array<{\n            holderCount: number;\n            totalAmount: string;\n            totalAmountRawInteger: string;\n            lastUpdatedAt: string;\n        }>;\n        latestHoldersCount: number;\n        syncStatus: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        };\n    };\n}\n\nexport const actionGetTokenHoldersCount: Action = {\n    name: \"GET_TOKEN_HOLDERS_COUNT_ANKR\",\n    similes: [\"COUNT_HOLDERS\", \"TOTAL_HOLDERS\", \"HOLDERS_COUNT\", \"NUMBER_OF_HOLDERS\"],\n    description: \"Get the total number of holders and historical data for a specific token.\",\n    // Fix the example data to match the interface\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"How many holders does [contract]0xdAC17F958D2ee523a2206206994597C13D831ec7[/contract] have? [chain]eth[/chain]\",\n                filters: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\"\n                }\n            } as GetTokenHoldersCountContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Token Holders Count on ETH:\\n\\n\" +\n                      \"Current Holders: 500,000\\n\\n\" +\n                      \"Historical Data:\\n\" +\n                      \"1. 1/24/2024\\n\" +\n                      \"   Holders: 500,000\\n\" +\n                      \"   Total Amount: 1,000,000\\n\\n\" +\n                      \"Sync Status: completed (0s)\",\n                success: true,\n                data: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n                    tokenDecimals: 18,\n                    holderCountHistory: [\n                        {\n                            holderCount: 500000,\n                            totalAmount: \"1000000\",\n                            totalAmountRawInteger: \"1000000000000000000000000\",\n                            lastUpdatedAt: \"2024-01-24T10:30:15Z\"\n                        }\n                    ],\n                    latestHoldersCount: 500000,\n                    syncStatus: {\n                        timestamp: 1706093415,\n                        lag: \"0s\",\n                        status: \"completed\"\n                    }\n                }\n            } as GetTokenHoldersCountContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_TOKEN_HOLDERS_COUNT_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_TOKEN_HOLDERS_COUNT_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetTokenHoldersCountContent;\n            const parsedContent = parseAPIContent(content.text);\n\n            if (!parsedContent.chain || !parsedContent.contract) {\n                throw new ValidationError(\"Blockchain and contract address are required\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_TOKEN_HOLDERS_COUNT_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetTokenHoldersCountContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n            // Parse the prompt using our API content parser\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasContract: !!parsedContent.contract,\n                hasChain: !!parsedContent.chain,\n                contract: parsedContent.contract,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['contract', 'chain']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: parsedContent.chain,\n                contractAddress: parsedContent.contract,\n                pageSize: 10\n            };\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getTokenHoldersCount\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const result = response.data.result;\n\n                // Format the response text\n                let formattedText = `Token Holders Count on ${parsedContent.chain?.toUpperCase() || 'UNKNOWN'}:\\n\\n`;\n                formattedText += `Current Holders: ${result.latestHoldersCount.toLocaleString()}\\n\\n`;\n                formattedText += \"Historical Data:\\n\";\n\n                result.holderCountHistory.forEach((history: {\n                    holderCount: number;\n                    totalAmount: string;\n                    totalAmountRawInteger: string;\n                    lastUpdatedAt: string;\n                }, index: number) => {\n                    const date = new Date(history.lastUpdatedAt).toLocaleDateString();\n                    formattedText += `\n${index + 1}. ${date}\n   Holders: ${history.holderCount.toLocaleString()}\n   Total Amount: ${Number(history.totalAmount).toLocaleString()}`;\n                });\n\n                if (result.syncStatus) {\n                    formattedText += `\n\nSync Status: ${result.syncStatus.status} (${result.syncStatus.lag})`;\n                }\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: result\n                    } as GetTokenHoldersCountContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch token holders count: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch token holders count\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting token holders count: ${errorMessage}`,\n                    success: false\n                } as GetTokenHoldersCountContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_TOKEN_HOLDERS_COUNT_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetTokenHoldersCount;\n",
    "export class HyperbolicError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'HyperbolicError';\n    Object.setPrototypeOf(this, HyperbolicError.prototype);\n  }\n}\n\nexport class ConfigurationError extends HyperbolicError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ConfigurationError';\n    Object.setPrototypeOf(this, ConfigurationError.prototype);\n  }\n}\n\nexport class APIError extends HyperbolicError {\n  constructor(message: string, public statusCode?: number) {\n    super(message);\n    this.name = 'APIError';\n    Object.setPrototypeOf(this, APIError.prototype);\n  }\n}\n\nexport class ValidationError extends HyperbolicError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ValidationError';\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n}\n\nexport class SSHError extends HyperbolicError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SSHError';\n    Object.setPrototypeOf(this, SSHError.prototype);\n  }\n}\n\nexport class GPUError extends HyperbolicError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'GPUError';\n    Object.setPrototypeOf(this, GPUError.prototype);\n  }\n}\n",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { elizaLogger } from \"@elizaos/core\";\nimport { APIError, ValidationError } from '../error/base';\n\n// ------------------------------------------------------------------------------------------------\n// Types\n// ------------------------------------------------------------------------------------------------\ninterface ParsedAPIContent {\n    wallet?: string;\n    chain?: string;\n    contract?: string;\n    token?: string;\n    txHash?: string;\n    block?: string;\n    block2?: string;\n    fromTimestamp?: number;\n    toTimestamp?: number;\n    raw: {\n        text: string;\n        matches: {\n            wallet: boolean;\n            chain: boolean;\n            contract: boolean;\n            token: boolean;\n            txHash: boolean;\n            block: boolean;\n            block2: boolean;\n            fromTimestamp: boolean;\n            toTimestamp: boolean;\n        };\n    };\n}\n\n// ------------------------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------------------------\nconst SUPPORTED_CHAINS = [\n    'eth', 'ethereum',\n    'bsc', 'bnb',\n    'polygon', 'matic',\n    'avalanche', 'avax',\n    'optimism', 'op',\n    'base'\n];\n\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nconst TX_HASH_REGEX = /^0x[a-fA-F0-9]{64}$/;\n\n// ------------------------------------------------------------------------------------------------\n// Helper Functions\n// ------------------------------------------------------------------------------------------------\nconst normalizeChainName = (chain: string): string => {\n    chain = chain.toLowerCase().trim();\n    switch (chain) {\n        case 'eth':\n        case 'ethereum':\n            return 'eth';\n        case 'bsc':\n        case 'bnb':\n            return 'bsc';\n        case 'polygon':\n        case 'matic':\n            return 'polygon';\n        case 'avalanche':\n        case 'avax':\n            return 'avalanche';\n        case 'optimism':\n        case 'op':\n            return 'optimism';\n        case 'base':\n            return 'base';\n        default:\n            throw new ValidationError(`Unsupported blockchain: ${chain}`);\n    }\n};\n\nconst validateAddress = (address: string): boolean => {\n    return ADDRESS_REGEX.test(address);\n};\n\nconst validateTxHash = (hash: string): boolean => {\n    return TX_HASH_REGEX.test(hash);\n};\n\n// Add block number validation\nconst validateBlockNumber = (block: string): boolean => {\n    return /^\\d+$/.test(block);\n};\n\n// Add timestamp validation\nconst validateTimestamp = (timestamp: string): boolean => {\n    const num = parseInt(timestamp, 10);\n    return !isNaN(num) && num > 0;\n};\n\n// Add token ID validation\nconst validateTokenId = (tokenId: string): boolean => {\n    return tokenId.trim() !== '';  // Just ensure it's not empty\n};\n\n// ------------------------------------------------------------------------------------------------\n// Main Parser\n// ------------------------------------------------------------------------------------------------\n/**\n * Parses API-related content from text, extracting wallet addresses, chain names,\n * contract addresses, token addresses, and transaction hashes.\n *\n * @param text The input text containing tagged content\n * @returns ParsedAPIContent object containing extracted and validated information\n *\n * @example\n * Input text: \"Check balance for [wallet]0x123...[/wallet] on [chain]eth[/chain]\"\n */\nexport function parseAPIContent(text: string): ParsedAPIContent {\n    try {\n        const parsed: ParsedAPIContent = {\n            raw: {\n                text,\n                matches: {\n                    wallet: false,\n                    chain: false,\n                    contract: false,\n                    token: false,\n                    txHash: false,\n                    block: false,\n                    block2: false,\n                    fromTimestamp: false,\n                    toTimestamp: false\n                }\n            }\n        };\n\n        // Parse wallet address\n        const walletMatch = text.match(/\\[wallet\\]([\\s\\S]*?)\\[\\/wallet\\]/);\n        if (walletMatch) {\n            const wallet = walletMatch[1].trim();\n            if (!validateAddress(wallet)) {\n                throw new ValidationError(`Invalid wallet address: ${wallet}`);\n            }\n            parsed.wallet = wallet;\n            parsed.raw.matches.wallet = true;\n        }\n\n        // Parse chain name\n        const chainMatch = text.match(/\\[chain\\]([\\s\\S]*?)\\[\\/chain\\]/);\n        if (chainMatch) {\n            const chain = chainMatch[1].trim();\n            parsed.chain = normalizeChainName(chain);\n            parsed.raw.matches.chain = true;\n        }\n\n        // Parse contract address\n        const contractMatch = text.match(/\\[contract\\]([\\s\\S]*?)\\[\\/contract\\]/);\n        if (contractMatch) {\n            const contract = contractMatch[1].trim();\n            if (!validateAddress(contract)) {\n                throw new ValidationError(`Invalid contract address: ${contract}`);\n            }\n            parsed.contract = contract;\n            parsed.raw.matches.contract = true;\n        }\n\n        // Parse token ID (modified from token address)\n        const tokenMatch = text.match(/\\[token\\]([\\s\\S]*?)\\[\\/token\\]/);\n        if (tokenMatch) {\n            const token = tokenMatch[1].trim();\n            if (!validateTokenId(token)) {\n                throw new ValidationError(`Invalid token ID: ${token}`);\n            }\n            parsed.token = token;\n            parsed.raw.matches.token = true;\n        }\n\n        // Parse transaction hash\n        const txMatch = text.match(/\\[txHash\\]([\\s\\S]*?)\\[\\/txHash\\]/);\n        if (txMatch) {\n            const txHash = txMatch[1].trim();\n            if (!validateTxHash(txHash)) {\n                throw new ValidationError(`Invalid transaction hash: ${txHash}`);\n            }\n            parsed.txHash = txHash;\n            parsed.raw.matches.txHash = true;\n        }\n\n        // Parse block number\n        const blockMatch = text.match(/\\[block\\]([\\s\\S]*?)\\[\\/block\\]/);\n        if (blockMatch) {\n            const block = blockMatch[1].trim();\n            if (!validateBlockNumber(block)) {\n                throw new ValidationError(`Invalid block number: ${block}`);\n            }\n            parsed.block = block;\n            parsed.raw.matches.block = true;\n        }\n\n        // Parse second block number if present\n        const block2Match = text.match(/\\[block2\\]([\\s\\S]*?)\\[\\/block2\\]/);\n        if (block2Match) {\n            const block2 = block2Match[1].trim();\n            if (!validateBlockNumber(block2)) {\n                throw new ValidationError(`Invalid block number: ${block2}`);\n            }\n            parsed.block2 = block2;\n            parsed.raw.matches.block2 = true;\n        }\n\n        // Parse fromTimestamp\n        const fromTimestampMatch = text.match(/\\[fromtimestamp\\]([\\s\\S]*?)\\[\\/fromtimestamp\\]/);\n        if (fromTimestampMatch) {\n            const timestamp = fromTimestampMatch[1].trim();\n            if (!validateTimestamp(timestamp)) {\n                throw new ValidationError(`Invalid from timestamp: ${timestamp}`);\n            }\n            parsed.fromTimestamp = parseInt(timestamp, 10);\n            parsed.raw.matches.fromTimestamp = true;\n        }\n\n        // Parse toTimestamp\n        const toTimestampMatch = text.match(/\\[totimestamp\\]([\\s\\S]*?)\\[\\/totimestamp\\]/);\n        if (toTimestampMatch) {\n            const timestamp = toTimestampMatch[1].trim();\n            if (!validateTimestamp(timestamp)) {\n                throw new ValidationError(`Invalid to timestamp: ${timestamp}`);\n            }\n            parsed.toTimestamp = parseInt(timestamp, 10);\n            parsed.raw.matches.toTimestamp = true;\n        }\n\n        return parsed;\n\n    } catch (error) {\n        elizaLogger.error(\"API content parsing failed\", {\n            error: error instanceof Error ? error.message : String(error)\n        });\n        throw error;\n    }\n}\n\n// ------------------------------------------------------------------------------------------------\n// Validation Helpers\n// ------------------------------------------------------------------------------------------------\nexport function validateRequiredFields(\n    parsed: ParsedAPIContent,\n    required: Array<keyof ParsedAPIContent['raw']['matches']>\n): void {\n    const missing = required.filter(field => !parsed.raw.matches[field]);\n    if (missing.length > 0) {\n        throw new ValidationError(\n            `Missing required fields: ${missing.join(', ')}. Please provide them in the format [field]value[/field]`\n        );\n    }\n}\n\nexport function validateChainSupport(chain: string): void {\n    if (!SUPPORTED_CHAINS.includes(chain.toLowerCase())) {\n        throw new ValidationError(\n            `Unsupported blockchain: ${chain}. Supported chains: ${SUPPORTED_CHAINS.join(', ')}`\n        );\n    }\n}",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetTokenPrice] ${message}`, data);\n        console.log(`[GetTokenPrice] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetTokenPriceContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        contractAddress?: string;\n    };\n    success?: boolean;\n    data?: {\n        blockchain: string;\n        contractAddress: string;\n        usdPrice: string;\n        syncStatus: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        };\n    };\n}\n\nexport const actionGetTokenPrice: Action = {\n    name: \"GET_TOKEN_PRICE_ANKR\",\n    similes: [\"CHECK_PRICE\", \"TOKEN_PRICE\", \"CRYPTO_PRICE\", \"PRICE_CHECK\"],\n    description: \"Get the current USD price for any token on eth blockchain.\",\n\n\n\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"What's the current price of [contract]0x8290333cef9e6d528dd5618fb97a76f268f3edd4[/contract] token [chain]eth[/chain]\",\n                filters: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0x8290333cef9e6d528dd5618fb97a76f268f3edd4\"\n                }\n            } as GetTokenPriceContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Current token price on eth:\\n\\n\" +\n                      \"Price: $0.03024 USD\\n\" +\n                      \"Contract: 0x8290...3edd4\\n\" +\n                      \"Sync Status: synced (lag: -8s)\",\n                success: true,\n                data: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0x8290333cef9e6d528dd5618fb97a76f268f3edd4\",\n                    usdPrice: \"0.030239944206509556547\",\n                    syncStatus: {\n                        timestamp: 1737760907,\n                        lag: \"-8s\",\n                        status: \"synced\"\n                    }\n                }\n            } as GetTokenPriceContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_TOKEN_PRICE_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_TOKEN_PRICE_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetTokenPriceContent;\n            const parsedContent = parseAPIContent(content.text);\n\n            if (!parsedContent.chain || !parsedContent.contract) {\n                throw new ValidationError(\"Blockchain and contract address are required\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_TOKEN_PRICE_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetTokenPriceContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n            const parsedContent = parseAPIContent(messageContent.text);\n            validateRequiredFields(parsedContent, ['contract', 'chain']);\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getTokenPrice\",\n                        params: {\n                            blockchain: parsedContent.chain,\n                            contractAddress: parsedContent.contract\n                        },\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const result = response.data.result;\n                const price = Number(result.usdPrice).toFixed(5);\n\n                const formattedText = `Current token price on ${parsedContent.chain}:\\n\\n` +\n                    `Price: $${price} USD\\n` +\n                    `Contract: ${result.contractAddress.slice(0, 6)}...${result.contractAddress.slice(-4)}\\n` +\n                    `Sync Status: ${result.syncStatus.status} (lag: ${result.syncStatus.lag})`;\n\n                if (callback) {\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: result\n                    } as GetTokenPriceContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch token price: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch token price\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting token price: ${errorMessage}`,\n                    success: false\n                } as GetTokenPriceContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_TOKEN_PRICE_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetTokenPrice;\n",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetTokenTransfers] ${message}`, data);\n        console.log(`[GetTokenTransfers] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetTokenTransfersContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        contractAddress?: string;\n        fromTimestamp?: number;\n        toTimestamp?: number;\n        pageSize?: number;\n        pageToken?: string;\n    };\n    success?: boolean;\n    data?: {\n        transfers: Array<{\n            fromAddress: string;\n            toAddress: string;\n            contractAddress: string;\n            value: string;\n            valueRawInteger: string;\n            blockchain: string;\n            tokenName: string;\n            tokenSymbol: string;\n            tokenDecimals: number;\n            thumbnail: string;\n            transactionHash: string;\n            blockHeight: number;\n            timestamp: number;\n        }>;\n        syncStatus?: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        };\n    };\n}\n\n// Define transfer type\ntype TokenTransfer = {\n    fromAddress: string;\n    toAddress: string;\n    contractAddress: string;\n    value: string;\n    valueRawInteger: string;\n    blockchain: string;\n    tokenName: string;\n    tokenSymbol: string;\n    tokenDecimals: number;\n    thumbnail: string;\n    transactionHash: string;\n    blockHeight: number;\n    timestamp: number;\n};\n\nexport const actionGetTokenTransfers: Action = {\n    name: \"GET_TOKEN_TRANSFERS_ANKR\",\n    similes: [\"LIST_TRANSFERS\", \"SHOW_TRANSFERS\", \"TOKEN_MOVEMENTS\", \"TRANSFER_HISTORY\"],\n    description: \"Get transfer history for a specific token or address on eth.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me recent contract [contract]0xff970a61a04b1ca14834a43f5de4533ebddb5cc8[/contract] transfers [chain]eth[/chain] from [fromtimestamp]1655197483[/fromtimestamp] to [totimestamp]1656061483[/totimestamp]\",\n                filters: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0xff970a61a04b1ca14834a43f5de4533ebddb5cc8\",\n                    pageSize: 5,\n                    fromTimestamp: 1655197483,\n                    toTimestamp: 1656061483\n                }\n            } as GetTokenTransfersContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the 5 most recent USDC transfers on eth:\\n\\n\" +\n                      \"1. Transfer\\n\" +\n                      \"   From: 0x1234...5678\\n\" +\n                      \"   To: 0xabcd...ef01\\n\" +\n                      \"   Amount: 10,000 USDC\\n\" +\n                      \"   Time: 2024-01-24 10:30:15\\n\\n\" +\n                      \"2. Transfer\\n\" +\n                      \"   From: 0x9876...5432\\n\" +\n                      \"   To: 0xfedc...ba98\\n\" +\n                      \"   Amount: 5,000 USDC\\n\" +\n                      \"   Time: 2024-01-24 10:29:45\",\n                success: true,\n                data: {\n                    transfers: [{\n                        fromAddress: \"0x1234567890123456789012345678901234567890\",\n                        toAddress: \"0xabcdef0123456789abcdef0123456789abcdef01\",\n                        contractAddress: \"0xff970a61a04b1ca14834a43f5de4533ebddb5cc8\",\n                        value: \"10000.0\",\n                        valueRawInteger: \"10000000000000000000000\",\n                        blockchain: \"eth\",\n                        tokenName: \"USD Coin\",\n                        tokenSymbol: \"USDC\",\n                        tokenDecimals: 6,\n                        thumbnail: \"\",\n                        transactionHash: \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n                        blockHeight: 123456789,\n                        timestamp: 1706093415\n                    }],\n                    syncStatus: {\n                        timestamp: 1706093415,\n                        lag: \"0s\",\n                        status: \"completed\"\n                    }\n                }\n            } as GetTokenTransfersContent\n        } as ActionExample\n    ]],\n\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_TOKEN_TRANSFERS_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_TOKEN_TRANSFERS_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetTokenTransfersContent;\n            const parsedContent = parseAPIContent(content.text);\n\n            if (!parsedContent.chain || !parsedContent.contract) {\n                throw new ValidationError(\"Blockchain and contract address are required\");\n            }\n\n            if (parsedContent.fromTimestamp && parsedContent.toTimestamp) {\n                if (parsedContent.fromTimestamp > parsedContent.toTimestamp) {\n                    throw new ValidationError(\"From timestamp must be less than to timestamp\");\n                }\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_TOKEN_TRANSFERS_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetTokenTransfersContent;\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            // Parse the prompt using our API content parser\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasContract: !!parsedContent.contract,\n                hasChain: !!parsedContent.chain,\n                hasFromTimestamp: !!parsedContent.fromTimestamp,\n                hasToTimestamp: !!parsedContent.toTimestamp,\n                contract: parsedContent.contract,\n                chain: parsedContent.chain,\n                fromTimestamp: parsedContent.fromTimestamp,\n                toTimestamp: parsedContent.toTimestamp\n            });\n\n            validateRequiredFields(parsedContent, ['contract', 'chain', 'fromTimestamp', 'toTimestamp']);\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getTokenTransfers\",\n                        params: {\n                            address: parsedContent.contract,\n                            blockchain: [parsedContent.chain],\n                            fromTimestamp: parsedContent.fromTimestamp,\n                            toTimestamp: parsedContent.toTimestamp,\n                            pageSize: messageContent.filters?.pageSize || 10\n                        },\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const result = response.data.result;\n\n                let formattedText = `Token Transfers on ${parsedContent.chain?.toUpperCase() || 'UNKNOWN'}:\\n\\n`;\n\n                result.transfers.forEach((transfer: TokenTransfer, index: number) => {\n                    const date = new Date(transfer.timestamp * 1000).toLocaleString();\n                    const value = Number(transfer.value).toLocaleString();\n\n                    formattedText += `${index + 1}. Transfer\\n`;\n                    formattedText += `   From: ${transfer.fromAddress.slice(0, 6)}...${transfer.fromAddress.slice(-4)}\\n`;\n                    formattedText += `   To: ${transfer.toAddress.slice(0, 6)}...${transfer.toAddress.slice(-4)}\\n`;\n                    formattedText += `   Amount: ${value} ${transfer.tokenSymbol}\\n`;\n                    formattedText += `   Token: ${transfer.tokenName}\\n`;\n                    formattedText += `   Time: ${date}\\n\\n`;\n                });\n\n                if (result.syncStatus) {\n                    formattedText += `\\nSync Status: ${result.syncStatus.status} (lag: ${result.syncStatus.lag})\\n`;\n                }\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            transfers: result.transfers,\n                            nextPageToken: result.nextPageToken\n                        }\n                    } as GetTokenTransfersContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch token transfers: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch token transfers\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting token transfers: ${errorMessage}`,\n                    success: false\n                } as GetTokenTransfersContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_TOKEN_TRANSFERS_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetTokenTransfers;\n",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetAccountBalance] ${message}`, data);\n        console.log(`[GetAccountBalance] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetAccountBalanceContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string[];\n        walletAddress?: string;\n    };\n    success?: boolean;\n    data?: {\n        address: string;\n        balances: Array<{\n            blockchain: string;\n            tokenName: string;\n            symbol: string;\n            balance: string;\n            balanceRawInteger: string;\n            balanceUsd: string;\n            tokenDecimals: number;\n            tokenType: string;\n            contractAddress?: string;\n        }>;\n    };\n}\n\n// Add interface for balance\ninterface TokenBalance {\n    blockchain: string;\n    contractAddress?: string;\n    tokenName: string;\n    tokenSymbol: string;\n    tokenDecimals: number;\n    tokenType: string;\n    holderAddress: string;\n    balance: string;\n    balanceRawInteger: string;\n    balanceUsd: string;\n    tokenPrice: string;\n}\n\n// ------------------------------------------------------------------------------------------------\n// Core Action implementation\n// ------------------------------------------------------------------------------------------------\nexport const actionGetAccountBalance: Action = {\n    name: \"GET_ACCOUNT_BALANCE_ANKR\",\n    similes: [\"CHECK_BALANCE\", \"SHOW_BALANCE\", \"VIEW_BALANCE\", \"GET_WALLET_BALANCE\"],\n    description: \"Retrieve account balance information across multiple blockchains.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me the balance for wallet [wallet]0x1234567890123456789012345678901234567890[/wallet] on [chain]eth[/chain]\",\n                filters: {\n                    blockchain: [\"eth\"],\n                    walletAddress: \"0x1234567890123456789012345678901234567890\"\n                }\n            } as GetAccountBalanceContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the balances for wallet 0x1234...7890:\\n\\n\" +\n                      \"1. ETH (Native)\\n\" +\n                      \"   Balance: 1.5 ETH\\n\" +\n                      \"   USD Value: $3,000.00\\n\\n\" +\n                      \"2. USDC (ERC20)\\n\" +\n                      \"   Balance: 1000 USDC\\n\" +\n                      \"   Contract: 0xa0b8...c4d5\\n\" +\n                      \"   USD Value: $1,000.00\",\n                success: true,\n                data: {\n                    address: \"0x1234567890123456789012345678901234567890\",\n                    balances: [{\n                        blockchain: \"eth\",\n                        tokenName: \"Ethereum\",\n                        symbol: \"ETH\",\n                        balance: \"1.5\",\n                        balanceRawInteger: \"1500000000000000000\",\n                        balanceUsd: \"3000.00\",\n                        tokenDecimals: 18,\n                        tokenType: \"NATIVE\"\n                    }, {\n                        blockchain: \"eth\",\n                        tokenName: \"USD Coin\",\n                        symbol: \"USDC\",\n                        balance: \"1000\",\n                        balanceRawInteger: \"1000000000\",\n                        balanceUsd: \"1000.00\",\n                        tokenDecimals: 6,\n                        tokenType: \"ERC20\",\n                        contractAddress: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"\n                    }]\n                }\n            } as GetAccountBalanceContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_ACCOUNT_BALANCE_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_ACCOUNT_BALANCE_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetAccountBalanceContent;\n\n            if (!content.filters?.walletAddress) {\n                throw new ValidationError(\"Wallet address is required\");\n            }\n\n            if (content.filters?.blockchain && !Array.isArray(content.filters.blockchain)) {\n                throw new ValidationError(\"Blockchain must be an array\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_ACCOUNT_BALANCE_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetAccountBalanceContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            console.log(\"Debug - Message content details:\", {\n                hasText: !!messageContent?.text,\n                hasFilters: !!messageContent?.filters,\n                textContent: messageContent?.text,\n                contentType: typeof messageContent?.text\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasWallet: !!parsedContent.wallet,\n                hasChain: !!parsedContent.chain,\n                wallet: parsedContent.wallet,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['wallet', 'chain']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: [parsedContent.chain],\n                walletAddress: parsedContent.wallet\n            };\n\n            console.log(\"Debug - API request parameters:\", {\n                params: requestParams,\n                endpoint: ANKR_ENDPOINTS.production.multichain\n            });\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getAccountBalance\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const balances = response.data.result.assets;\n                const address = parsedContent.wallet;\n\n                // Format the response text\n                let formattedText = `Here are the balances for wallet ${address?.slice(0, 6)}...${address?.slice(-4)}:\\n\\n`;\n\n                // Use the interface instead of any\n                balances.forEach((balance: TokenBalance, index: number) => {\n                    formattedText += `${index + 1}. ${balance.tokenName} (${balance.tokenType})\\n`;\n                    formattedText += `   Balance: ${balance.balance} ${balance.tokenSymbol}\\n`;\n                    if (balance.contractAddress) {\n                        formattedText += `   Contract: ${balance.contractAddress.slice(0, 6)}...${balance.contractAddress.slice(-4)}\\n`;\n                    }\n                    formattedText += `   USD Value: $${Number.parseFloat(balance.balanceUsd).toFixed(2)}\\n\\n`;\n                });\n\n                // ------------------------------------------------------------------------------------------------\n                // Core Callback logic\n                // ------------------------------------------------------------------------------------------------\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            address,\n                            balances\n                        }\n                    } as GetAccountBalanceContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch balance data: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch balance data\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting account balance: ${errorMessage}`,\n                    success: false\n                } as GetAccountBalanceContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_ACCOUNT_BALANCE_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetAccountBalance;\n",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetTransactionsByAddress] ${message}`, data);\n        console.log(`[GetTransactionsByAddress] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetTransactionsByAddressContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        address?: string;\n        pageSize?: number;\n        includeLogs?: boolean;\n    };\n    success?: boolean;\n    data?: {\n        nextPageToken?: string;\n        transactions: Array<{\n            blockHash: string;\n            blockNumber: string;\n            from: string;\n            to: string;\n            hash: string;\n            value: string;\n            gas: string;\n            gasPrice: string;\n            gasUsed: string;\n            input: string;\n            nonce: string;\n            timestamp: string;\n            status: string;\n            blockchain: string;\n            logs?: Array<{\n                address: string;\n                topics: string[];\n                data: string;\n                blockNumber: string;\n                transactionHash: string;\n                logIndex: string;\n                timestamp: string;\n            }>;\n        }>;\n        syncStatus?: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        };\n    };\n}\n\n// Define transaction type\ntype Transaction = {\n    blockHash: string;\n    blockNumber: string;\n    from: string;\n    to: string;\n    hash: string;\n    value: string;\n    gas: string;\n    gasPrice: string;\n    gasUsed: string;\n    input: string;\n    nonce: string;\n    timestamp: string;\n    status: string;\n    blockchain: string;\n    logs?: Array<{\n        address: string;\n        topics: string[];\n        data: string;\n        blockNumber: string;\n        transactionHash: string;\n        logIndex: string;\n        timestamp: string;\n    }>;\n};\n\nexport const actionGetTransactionsByAddress: Action = {\n    name: \"GET_TRANSACTIONS_BY_ADDRESS_ANKR\",\n    similes: [\"LIST_TXS\", \"SHOW_TXS\", \"VIEW_TRANSACTIONS\", \"GET_ADDRESS_TXS\"],\n    description: \"Get transactions for a specific address on the blockchain\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me the latest transactions for address [contract]0xd8da6bf26964af9d7eed9e03e53415d37aa96045[/contract] [chain]eth[/chain]\",\n                filters: {\n                    blockchain: \"eth\",\n                    address: \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\",\n                    pageSize: 2,\n                    includeLogs: true\n                }\n            } as GetTransactionsByAddressContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the latest transactions for the address on eth:\\n\\n\" +\n                      \"1. Transfer Out\\n\" +\n                      \"   To: 0x1234...5678\\n\" +\n                      \"   Amount: 1.5 ETH\\n\" +\n                      \"   Time: 2024-01-24 10:30:15\\n\" +\n                      \"   Status: Success\\n\\n\" +\n                      \"2. Contract Interaction\\n\" +\n                      \"   Contract: 0xabcd...ef01 (Uniswap V3)\\n\" +\n                      \"   Method: swapExactTokensForTokens\\n\" +\n                      \"   Time: 2024-01-24 10:15:22\\n\" +\n                      \"   Status: Success\",\n                success: true,\n                data: {\n                    transactions: [{\n                        blockchain: \"eth\",\n                        from: \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\",\n                        to: \"0x1234567890123456789012345678901234567890\",\n                        hash: \"0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890\",\n                        value: \"1500000000000000000\",\n                        gas: \"21000\",\n                        gasPrice: \"100000000\",\n                        gasUsed: \"21000\",\n                        timestamp: \"2024-01-24T10:30:15Z\",\n                        status: \"1\",\n                        blockNumber: \"123456789\",\n                        blockHash: \"0x9876543210fedcba9876543210fedcba9876543210fedcba9876543210fedcba\"\n                    }]\n                }\n            } as GetTransactionsByAddressContent\n        } as ActionExample\n    ]],\n\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_TRANSACTIONS_BY_ADDRESS_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_TRANSACTIONS_BY_ADDRESS_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetTransactionsByAddressContent;\n            const parsedContent = parseAPIContent(content.text);\n\n            if (!parsedContent.chain || !parsedContent.contract) {\n                throw new ValidationError(\"Blockchain and address are required\");\n            }\n\n            // Validate pageSize if provided\n            if (content.filters?.pageSize && (content.filters.pageSize < 1 || content.filters.pageSize > 100)) {\n                throw new ValidationError(\"Page size must be between 1 and 100\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_TRANSACTIONS_BY_ADDRESS_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetTransactionsByAddressContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            console.log(\"Debug - Message content details:\", {\n                hasText: !!messageContent?.text,\n                hasFilters: !!messageContent?.filters,\n                textContent: messageContent?.text,\n                contentType: typeof messageContent?.text\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            // Parse the prompt using our API content parser\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasContract: !!parsedContent.contract,\n                hasChain: !!parsedContent.chain,\n                contract: parsedContent.contract,\n                chain: parsedContent.chain\n            });\n\n            validateRequiredFields(parsedContent, ['contract', 'chain']);\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getTransactionsByAddress\",\n                        params: {\n                            blockchain: [parsedContent.chain],\n                            address: parsedContent.contract,\n                            pageSize: messageContent.filters?.pageSize || 5,\n                            includeLogs: messageContent.filters?.includeLogs || true\n                        },\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const result = response.data.result;\n                let formattedText = `Transactions for ${parsedContent.contract} on ${parsedContent.chain?.toUpperCase() || 'UNKNOWN'}:\\n\\n`;\n\n                result.transactions.forEach((tx: Transaction, index: number) => {\n                    const date = new Date(Number.parseInt(tx.timestamp, 16) * 1000).toLocaleString();\n                    const value = Number.parseInt(tx.value, 16) / 1e18;\n                    const status = tx.status === \"0x1\" ? \"Success\" : \"Failed\";\n\n                    formattedText += `${index + 1}. Transaction\\n`;\n                    formattedText += `   Hash: ${tx.hash.slice(0, 6)}...${tx.hash.slice(-4)}\\n`;\n                    formattedText += `   From: ${tx.from.slice(0, 6)}...${tx.from.slice(-4)}\\n`;\n                    formattedText += `   To: ${tx.to.slice(0, 6)}...${tx.to.slice(-4)}\\n`;\n                    formattedText += `   Value: ${value.toFixed(4)} ETH\\n`;\n                    formattedText += `   Status: ${status}\\n`;\n                    formattedText += `   Time: ${date}\\n\\n`;\n                });\n\n                if (callback) {\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            transactions: result.transactions,\n                            nextPageToken: result.nextPageToken,\n                            syncStatus: result.syncStatus\n                        }\n                    } as GetTransactionsByAddressContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch transactions: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch transactions\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting transactions: ${errorMessage}`,\n                    success: false\n                } as GetTransactionsByAddressContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_TRANSACTIONS_BY_ADDRESS_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetTransactionsByAddress;\n",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetTransactionsByHash] ${message}`, data);\n        console.log(`[GetTransactionsByHash] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetTransactionsByHashContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        transactionHash?: string;\n        includeLogs?: boolean;\n    };\n    success?: boolean;\n    data?: {\n        transactions: Array<{\n            blockHash: string;\n            blockNumber: string;\n            blockchain: string;\n            from: string;\n            to: string;\n            hash: string;\n            value: string;\n            gas: string;\n            gasPrice: string;\n            gasUsed: string;\n            input: string;\n            nonce: string;\n            timestamp: string;\n            status: string;\n            type: string;\n            v: string;\n            r: string;\n            s: string;\n            transactionIndex: string;\n            cumulativeGasUsed: string;\n        }>;\n        syncStatus?: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        } | null;\n    };\n}\n\nexport const actionGetTransactionsByHash: Action = {\n    name: \"GET_TRANSACTIONS_BY_HASH_ANKR\",\n    similes: [\"GET_TX\", \"SHOW_TRANSACTION\", \"VIEW_TX\", \"TRANSACTION_DETAILS\"],\n    description: \"Get detailed information about a transaction by its hash\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me details for transaction [txHash]0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef[/txHash] [chain]eth[/chain]\",\n                filters: {\n                    blockchain: \"eth\",\n                    transactionHash: \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n                    includeLogs: true\n                }\n            } as GetTransactionsByHashContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the details for the transaction on eth:\\n\\n\" +\n                      \"Transaction: 0x1234...cdef\\n\" +\n                      \"Status: Success\\n\" +\n                      \"From: 0xabcd...ef01\\n\" +\n                      \"To: 0x9876...5432\\n\" +\n                      \"Value: 1.5 ETH\\n\" +\n                      \"Gas Used: 150,000\\n\" +\n                      \"Gas Price: 0.1 Gwei\\n\" +\n                      \"Block: 123456789\\n\" +\n                      \"Timestamp: 2024-01-24 10:30:15\",\n                success: true,\n                data: {\n                    transactions: [{\n                        blockchain: \"eth\",\n                        from: \"0xabcdef0123456789abcdef0123456789abcdef01\",\n                        to: \"0x9876543210987654321098765432109876543210\",\n                        hash: \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n                        value: \"1500000000000000000\",\n                        gas: \"21000\",\n                        gasPrice: \"100000000\",\n                        gasUsed: \"21000\",\n                        timestamp: \"2024-01-24T10:30:15Z\",\n                        status: \"1\",\n                        blockNumber: \"123456789\",\n                        blockHash: \"0xfedcba0987654321fedcba0987654321fedcba0987654321fedcba0987654321\"\n                    }]\n                }\n            } as GetTransactionsByHashContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_TRANSACTIONS_BY_HASH_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_TRANSACTIONS_BY_HASH_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetTransactionsByHashContent;\n            const parsedContent = parseAPIContent(content.text);\n\n            if (!parsedContent.chain || !parsedContent.txHash) {\n                throw new ValidationError(\"Blockchain and transaction hash are required\");\n            }\n\n            // Validate transaction hash format\n            if (!/^0x[a-fA-F0-9]{64}$/.test(parsedContent.txHash)) {\n                throw new ValidationError(\"Invalid transaction hash format\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_TRANSACTIONS_BY_HASH_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetTransactionsByHashContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            console.log(\"Debug - Message content details:\", {\n                hasText: !!messageContent?.text,\n                hasFilters: !!messageContent?.filters,\n                textContent: messageContent?.text,\n                contentType: typeof messageContent?.text\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            // Parse the prompt using our API content parser\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasTx: !!parsedContent.txHash,\n                hasChain: !!parsedContent.chain,\n                tx: parsedContent.txHash,\n                chain: parsedContent.chain\n            });\n\n            validateRequiredFields(parsedContent, ['txHash', 'chain']);\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getTransactionsByHash\",\n                        params: {\n                            blockchain: parsedContent.chain,\n                            transactionHash: parsedContent.txHash,\n                            includeLogs: true\n                        },\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const transaction = response.data.result.transactions[0];\n                const timestamp = new Date(Number.parseInt(transaction.timestamp, 16) * 1000).toLocaleString();\n                const value = Number.parseInt(transaction.value, 16) / 1e18;\n                const gasPrice = Number.parseInt(transaction.gasPrice, 16) / 1e9;\n                const gasUsed = Number.parseInt(transaction.gasUsed, 16);\n                const blockNumber = Number.parseInt(transaction.blockNumber, 16);\n                const status = transaction.status === \"0x1\" ? \"Success\" : \"Failed\";\n\n                let formattedText = `Transaction Details on ${parsedContent.chain?.toUpperCase() || 'UNKNOWN'}:\\n\\n`;\n                formattedText += `Hash: ${transaction.hash}\\n`;\n                formattedText += `Status: ${status}\\n`;\n                formattedText += `From: ${transaction.from.slice(0, 6)}...${transaction.from.slice(-4)}\\n`;\n                formattedText += `To: ${transaction.to.slice(0, 6)}...${transaction.to.slice(-4)}\\n`;\n                formattedText += `Value: ${value.toFixed(6)} ETH\\n`;\n                formattedText += `Gas Used: ${gasUsed.toLocaleString()}\\n`;\n                formattedText += `Gas Price: ${gasPrice.toFixed(2)} Gwei\\n`;\n                formattedText += `Block: ${blockNumber.toLocaleString()}\\n`;\n                formattedText += `Time: ${timestamp}`;\n\n                if (callback) {\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: response.data.result\n                    } as GetTransactionsByHashContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch transaction: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch transaction\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting transaction: ${errorMessage}`,\n                    success: false\n                } as GetTransactionsByHashContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_TRANSACTIONS_BY_HASH_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetTransactionsByHash;\n",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetBlockchainStats] ${message}`, data);\n        console.log(`[GetBlockchainStats] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetBlockchainStatsContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string[];\n    };\n    success?: boolean;\n    data?: {\n        stats: Array<{\n            blockchain: string;\n            latestBlock: number;\n            totalTransactions: string;\n            totalAccounts: string;\n            tps: number;\n            gasPrice: string;\n            marketCap: string;\n            totalValueLocked: string;\n        }>;\n    };\n}\n\n// Update the interface to match actual API response\ninterface AnkrBlockchainStats {\n    blockchain: string;\n    totalTransactionsCount: number;\n    totalEventsCount: number;\n    latestBlockNumber: number;\n    blockTimeMs: number;\n    nativeCoinUsdPrice: string;\n}\n\n// ------------------------------------------------------------------------------------------------\n// Core Action implementation\n// ------------------------------------------------------------------------------------------------\nexport const actionGetBlockchainStats: Action = {\n    name: \"GET_BLOCKCHAIN_STATS_ANKR\",\n    similes: [\"CHAIN_STATS\", \"BLOCKCHAIN_INFO\", \"NETWORK_STATS\", \"CHAIN_METRICS\"],\n    description: \"Retrieve statistical information about specified blockchain networks.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me stats for [chain]eth[/chain] blockchain\",\n                filters: {\n                    blockchain: [\"eth\"]\n                }\n            } as GetBlockchainStatsContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the current statistics for Ethereum:\\n\\n\" +\n                      \"Latest Block: 19,234,567\\n\" +\n                      \"Total Transactions: 2.5B\\n\" +\n                      \"Active Accounts: 245M\\n\" +\n                      \"TPS: 15.5\\n\" +\n                      \"Gas Price: 25 Gwei\\n\" +\n                      \"Market Cap: $250B\\n\" +\n                      \"Total Value Locked: $45B\",\n                success: true,\n                data: {\n                    stats: [{\n                        blockchain: \"eth\",\n                        latestBlock: 19234567,\n                        totalTransactions: \"2500000000\",\n                        totalAccounts: \"245000000\",\n                        tps: 15.5,\n                        gasPrice: \"25000000000\",\n                        marketCap: \"250000000000\",\n                        totalValueLocked: \"45000000000\"\n                    }]\n                }\n            } as GetBlockchainStatsContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_BLOCKCHAIN_STATS_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_BLOCKCHAIN_STATS_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetBlockchainStatsContent;\n\n            if (content.filters?.blockchain && !Array.isArray(content.filters.blockchain)) {\n                throw new ValidationError(\"Blockchain must be an array\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_BLOCKCHAIN_STATS_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetBlockchainStatsContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            console.log(\"Debug - Message content details:\", {\n                hasText: !!messageContent?.text,\n                hasFilters: !!messageContent?.filters,\n                textContent: messageContent?.text,\n                contentType: typeof messageContent?.text\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasChain: !!parsedContent.chain,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['chain']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: parsedContent.chain  // Changed from array to string\n            };\n\n            console.log(\"Debug - API request parameters:\", {\n                params: requestParams,\n                endpoint: ANKR_ENDPOINTS.production.multichain\n            });\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getBlockchainStats\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const stats = response.data.result.stats;\n\n                // Format the response text\n                let formattedText = \"\";\n                for (const stat of stats) {\n                    formattedText += `Statistics for ${stat.blockchain.toUpperCase()}:\\n\\n`;\n                    formattedText += `Latest Block: ${stat.latestBlockNumber.toLocaleString()}\\n`;\n                    formattedText += `Total Transactions: ${(stat.totalTransactionsCount / 1e9).toFixed(1)}B\\n`;\n                    formattedText += `Total Events: ${(stat.totalEventsCount / 1e9).toFixed(1)}B\\n`;\n                    formattedText += `Block Time: ${(stat.blockTimeMs / 1000).toFixed(1)} seconds\\n`;\n                    formattedText += `Native Coin Price: $${Number(stat.nativeCoinUsdPrice).toFixed(2)}\\n\\n`;\n                }\n\n                // Update callback data structure to match new format\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            stats: stats.map((stat: AnkrBlockchainStats) => ({\n                                blockchain: stat.blockchain,\n                                latestBlock: stat.latestBlockNumber,\n                                totalTransactions: stat.totalTransactionsCount.toString(),\n                                totalEvents: stat.totalEventsCount.toString(),\n                                blockTime: stat.blockTimeMs / 1000,\n                                nativeCoinPrice: stat.nativeCoinUsdPrice\n                            }))\n                        }\n                    } as GetBlockchainStatsContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch blockchain stats: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch blockchain stats\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting blockchain stats: ${errorMessage}`,\n                    success: false\n                } as GetBlockchainStatsContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_BLOCKCHAIN_STATS_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetBlockchainStats;\n",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetCurrencies] ${message}`, data);\n        console.log(`[GetCurrencies] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetCurrenciesContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        pageSize?: number;\n        pageToken?: string;\n    };\n    success?: boolean;\n    data?: {\n        currencies: Array<{\n            blockchain: string;\n            address: string;\n            name: string;\n            symbol: string;\n            decimals: number;\n            thumbnail?: string;\n        }>;\n        syncStatus?: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        };\n    };\n}\n\n// ------------------------------------------------------------------------------------------------\n// Core Action implementation\n// ------------------------------------------------------------------------------------------------\nexport const actionGetCurrencies: Action = {\n    name: \"GET_CURRENCIES_ANKR\",\n    similes: [\"LIST_CURRENCIES\", \"SHOW_CURRENCIES\", \"VIEW_CURRENCIES\", \"FETCH_CURRENCIES\"],\n    description: \"Retrieve information about currencies on specified blockchain networks.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me the top currencies on [chain]eth[/chain]\",\n                filters: {\n                    blockchain: \"eth\",\n                    pageSize: 5,\n                    pageToken: \"eyJsYXN0X2JhbGFuY2UiOiIyIn0=\"\n                }\n            } as GetCurrenciesContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the top currencies on Ethereum:\\n\\n\" +\n                      \"1. Ethereum (ETH)\\n\" +\n                      \"   Market Cap: $250B\\n\" +\n                      \"   Holders: 2.5M\\n\" +\n                      \"   Total Supply: 120.5M ETH\\n\\n\" +\n                      \"2. USD Coin (USDC)\\n\" +\n                      \"   Contract: 0xa0b8...c4d5\\n\" +\n                      \"   Market Cap: $45B\\n\" +\n                      \"   Holders: 1.2M\\n\" +\n                      \"   Total Supply: 45B USDC\",\n                success: true,\n                data: {\n                    currencies: [\n                        {\n                            blockchain: \"eth\",\n                            address: \"0x0000000000000000000000000000000000000000\",\n                            name: \"Ethereum\",\n                            symbol: \"ETH\",\n                            decimals: 18\n                        }\n                    ]\n                }\n            } as GetCurrenciesContent\n        } as ActionExample\n    ]],\n\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_CURRENCIES_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_CURRENCIES_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetCurrenciesContent;\n\n            if (!content.filters?.blockchain) {\n                throw new ValidationError(\"Blockchain is required\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_CURRENCIES_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetCurrenciesContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasChain: !!parsedContent.chain,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['chain']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: parsedContent.chain,\n                pageSize: messageContent.filters?.pageSize ?? 5\n            };\n\n            console.log(\"Debug - API request parameters:\", {\n                params: requestParams,\n                endpoint: ANKR_ENDPOINTS.production.multichain\n            });\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getCurrencies\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const currencies = response.data.result.currencies;\n\n                // Format the response text\n                let formattedText = `Here are the top currencies from ${parsedContent.chain ? parsedContent.chain[0].toUpperCase() : 'Unknown Chain'}:\\n\\n`;\n\n                let index = 0;\n                for (const currency of currencies) {\n                    formattedText += [\n                        `${index + 1}. ${currency.name} (${currency.symbol})`,\n                        currency.address ? `   Contract: ${currency.address.slice(0, 6)}...${currency.address.slice(-4)}` : '',\n                        `   Decimals: ${currency.decimals}`,\n                        currency.thumbnail ? `   Logo: ${currency.thumbnail}` : '',\n                        '',\n                        ''\n                    ].filter(Boolean).join('\\n');\n                    index++;\n                }\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            currencies,\n                            syncStatus: response.data.result.syncStatus\n                        }\n                    } as GetCurrenciesContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch currencies data: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch currencies data\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting currencies: ${errorMessage}`,\n                    success: false\n                } as GetCurrenciesContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_CURRENCIES_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetCurrencies;\n",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetInteractions] ${message}`, data);\n        console.log(`[GetInteractions] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetInteractionsContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;  // Changed from string[] to string\n        address?: string;     // Changed from walletAddress\n        pageSize?: number;\n        pageToken?: string;\n    };\n    success?: boolean;\n    data?: {\n        interactions: Array<{\n            blockchain: string;\n            transactionHash: string;\n            blockNumber: number;\n            timestamp: string;\n            from: string;\n            to: string;\n            value: string;\n            gasPrice: string;\n            gasUsed: string;\n            methodName?: string;\n            logs: Array<{\n                address: string;\n                topics: string[];\n                data: string;\n                logIndex: number;\n            }>;\n        }>;\n        nextPageToken?: string;\n    };\n}\n\ninterface AnkrAPIResponse {\n    blockchains: string[];\n    syncStatus: {\n        timestamp: number;\n        lag: string;\n        status: string;\n    };\n}\n\n// ------------------------------------------------------------------------------------------------\n// Core Action implementation\n// ------------------------------------------------------------------------------------------------\nexport const actionGetInteractions: Action = {\n    name: \"GET_INTERACTIONS_ANKR\",\n    similes: [\"FETCH_INTERACTIONS\", \"SHOW_INTERACTIONS\", \"VIEW_INTERACTIONS\", \"LIST_INTERACTIONS\"],\n    description: \"Retrieve interactions between wallets and smart contracts on specified blockchain networks.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me interactions for the wallet [wallet]0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45[/wallet]\",\n                filters: {\n                    blockchain: \"eth\",  // Changed from string[] to string\n                    address: \"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\",\n                    pageSize: 5,\n                    pageToken: \"eyJsYXN0X2Jsb2NrIjoiMTIzNDU2Nzg4IiwibGFzdF9pbnRlcmFjdGlvbl9pbmRleCI6IjEifQ==\"\n                }\n            } as GetInteractionsContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the recent interactions:\\n\\n\" +\n                      \"1. Transfer (2024-03-15 14:30 UTC)\\n\" +\n                      \"   From: 0xabc...def1\\n\" +\n                      \"   To: 0x123...5678\\n\" +\n                      \"   Value: 1.5 ETH\\n\" +\n                      \"   Gas Used: 21,000\\n\" +\n                      \"   Tx Hash: 0xdef...789\\n\\n\" +\n                      \"2. Approve (2024-03-15 14:25 UTC)\\n\" +\n                      \"   From: 0xabc...def1\\n\" +\n                      \"   To: 0x123...5678\\n\" +\n                      \"   Value: 0 ETH\\n\" +\n                      \"   Gas Used: 45,000\\n\" +\n                      \"   Tx Hash: 0x789...012\",\n                success: true,\n                data: {\n                    interactions: [{\n                        blockchain: \"eth\",\n                        transactionHash: \"0xdef...789\",\n                        blockNumber: 17000100,\n                        timestamp: \"2024-03-15T14:30:00Z\",\n                        from: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n                        to: \"0x1234567890abcdef1234567890abcdef12345678\",\n                        value: \"1500000000000000000\",\n                        gasPrice: \"20000000000\",\n                        gasUsed: \"21000\",\n                        methodName: \"transfer\",\n                        logs: [{\n                            address: \"0x1234567890abcdef1234567890abcdef12345678\",\n                            topics: [\"0x000...123\"],\n                            data: \"0x000...456\",\n                            logIndex: 0\n                        }]\n                    }]\n                }\n            } as GetInteractionsContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_INTERACTIONS_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_INTERACTIONS_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetInteractionsContent;\n\n            // Only wallet address is required based on the API\n            if (!content.filters?.address) {\n                throw new ValidationError(\"Wallet address is required\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_INTERACTIONS_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetInteractionsContent;\n            const parsedContent = parseAPIContent(messageContent.text);\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['wallet']);\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: parsedContent.chain || \"eth\",\n                address: parsedContent.wallet,\n                pageSize: messageContent.filters?.pageSize ?? 5,\n                pageToken: messageContent.filters?.pageToken\n            };\n\n            try {\n                const response = await axios.post<{\n                    id: number;\n                    jsonrpc: string;\n                    result: AnkrAPIResponse;\n                }>(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getInteractions\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                // Format the response text based on the sync status\n                const formattedText = `Blockchain Status Information:\n\nAvailable Blockchains: ${response.data.result.blockchains.join(', ')}\nSync Status: ${response.data.result.syncStatus.status}\nLag: ${response.data.result.syncStatus.lag}`;\n\n                if (callback) {\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            interactions: [],\n                            syncStatus: response.data.result.syncStatus,\n                            availableBlockchains: response.data.result.blockchains\n                        }\n                    } as GetInteractionsContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch interactions data: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch interactions data\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting interactions: ${errorMessage}`,\n                    success: false\n                } as GetInteractionsContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_INTERACTIONS_ANKR action\");\n        }\n    },\n\n\n};\n\nexport default actionGetInteractions;\n",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetNFTHolders] ${message}`, data);\n        console.log(`[GetNFTHolders] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetNFTHoldersContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;  // Changed from string[] to single string\n        contractAddress?: string;\n        pageSize?: number;\n        pageToken?: string;\n    };\n    success?: boolean;\n    data?: {\n        holders: Array<{\n            holderAddress: string;\n            balance: string;\n            balanceRawInteger: string;\n        }>;\n        nextPageToken?: string;\n        blockchain?: string;\n        contractAddress?: string;\n        tokenDecimals?: number;\n        holdersCount?: number;\n        syncStatus?: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        };\n    };\n}\n\n// ------------------------------------------------------------------------------------------------\n// Core Action implementation\n// ------------------------------------------------------------------------------------------------\nexport const actionGetNFTHolders: Action = {\n    name: \"GET_NFT_HOLDERS_ANKR\",\n    similes: [\"FETCH_NFT_HOLDERS\", \"SHOW_NFT_HOLDERS\", \"VIEW_NFT_HOLDERS\", \"LIST_NFT_HOLDERS\"],\n    description: \"Retrieve holders of specific NFTs on specified blockchain networks.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me holders of NFT contract [contract]0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258[/contract] on [chain]bsc[/chain]\",\n                filters: {\n                    blockchain: \"bsc\",  // Changed from string[] to string\n                    contractAddress: \"0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258\",\n                    pageSize: 5\n                }\n            } as GetNFTHoldersContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the NFT holders:\\n\\n\" +\n                      \"1. 0xabc...def1\\n\" +\n                      \"   Balance: 1.5\\n\" +\n                      \"   Raw Balance: 1500000000000000000\\n\\n\" +\n                      \"2. 0xdef...789a\\n\" +\n                      \"   Balance: 2.0\\n\" +\n                      \"   Raw Balance: 2000000000000000000\",\n                success: true,\n                data: {\n                    holders: [{\n                        holderAddress: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n                        balance: \"1.5\",\n                        balanceRawInteger: \"1500000000000000000\"\n                    }],\n                    blockchain: \"bsc\",\n                    contractAddress: \"0xf307910A4c7bbc79691fD374889b36d8531B08e3\",\n                    tokenDecimals: 18,\n                    holdersCount: 1000,\n                    syncStatus: {\n                        timestamp: 1737769593,\n                        lag: \"-2m\",\n                        status: \"synced\"\n                    }\n                }\n            } as GetNFTHoldersContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_NFT_HOLDERS_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_NFT_HOLDERS_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetNFTHoldersContent;\n\n            if (!content.filters?.contractAddress) {\n                throw new ValidationError(\"Contract address is required\");\n            }\n\n            // Blockchain is optional, defaults to \"eth\"\n            if (content.filters?.blockchain && typeof content.filters.blockchain !== 'string') {\n                throw new ValidationError(\"Blockchain must be a string\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_NFT_HOLDERS_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetNFTHoldersContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasContract: !!parsedContent.contract,\n                hasToken: !!parsedContent.token,\n                hasChain: !!parsedContent.chain,\n                contract: parsedContent.contract,\n                token: parsedContent.token,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['contract']);\n\n            const requestParams = {\n                blockchain: parsedContent.chain,\n                contractAddress: parsedContent.contract,\n                pageSize: messageContent.filters?.pageSize || 10,\n                pageToken: messageContent.filters?.pageToken\n            };\n\n            console.log(\"Debug - API request parameters:\", {\n                params: requestParams,\n                endpoint: endpoint\n            });\n\n            const response = await axios.post(\n                endpoint,\n                {\n                    jsonrpc: \"2.0\",\n                    method: \"ankr_getNFTHolders\",\n                    params: requestParams,\n                    id: 1\n                },\n                {\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                }\n            );\n\n            logGranular(\"Received response from Ankr API\", {\n                statusCode: response.status,\n                data: response.data\n            });\n\n            const result = response.data.result;\n            const formattedText =\n                `NFT Holders:\nTotal Holders: ${result.holders.length}\n\n${result.holders.map((holderAddress: string, index: number) =>\n    `${index + 1}. ${holderAddress}`\n).join('\\n')}\n\n${result.nextPageToken ? 'More holders available. Use the page token to see more.\\n' : ''}\n${result.syncStatus ? `Sync Status:\nLast Update: ${new Date(result.syncStatus.timestamp * 1000).toLocaleString()}\nLag: ${result.syncStatus.lag}\nStatus: ${result.syncStatus.status}` : ''}`;\n\n            logGranular(\"Formatted response text\", { formattedText });\n\n            if (callback) {\n                logGranular(\"Sending success callback with formatted text\");\n                callback({\n                    text: formattedText,\n                    success: true,\n                    data: {\n                        holders: result.holders.map((address: string) => ({\n                            holderAddress: address,\n                            balance: \"1\",  // Default values since not provided in response\n                            balanceRawInteger: \"1\"\n                        })),\n                        nextPageToken: result.nextPageToken,\n                        syncStatus: result.syncStatus\n                    }\n                } as GetNFTHoldersContent);\n            }\n\n            return true;\n\n        } catch (error: unknown) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting NFT holders: ${errorMessage}`,\n                    success: false\n                } as GetNFTHoldersContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_NFT_HOLDERS_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetNFTHolders;\n",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetNFTTransfers] ${message}`, data);\n        console.log(`[GetNFTTransfers] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetNFTTransfersContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        contractAddress?: string;\n        fromTimestamp?: number;\n        toTimestamp?: number;\n        pageSize?: number;\n        pageToken?: string;\n    };\n    success?: boolean;\n    data?: {\n        transfers: Array<{\n            fromAddress: string;\n            toAddress: string;\n            contractAddress: string;\n            value: string;\n            valueRawInteger: string;\n            blockchain: string;\n            tokenName: string;\n            tokenSymbol: string;\n            tokenDecimals: number;\n            thumbnail: string;\n            transactionHash: string;\n            blockHeight: number;\n            timestamp: number;\n        }>;\n        syncStatus?: {\n            timestamp?: number;\n            lag?: string;\n            status?: string;\n        } | null;\n    };\n}\n\n// Add type definition for transfer\ninterface NFTTransfer {\n    tokenName: string;\n    tokenSymbol: string;\n    fromAddress: string;\n    toAddress: string;\n    value: string;\n    timestamp: number;\n    transactionHash: string;\n    thumbnail?: string;\n}\n\nexport const actionGetNFTTransfers: Action = {\n    name: \"GET_NFT_TRANSFERS_ANKR\",\n    similes: [\"LIST_NFT_TRANSFERS\", \"SHOW_NFT_TRANSFERS\", \"VIEW_NFT_TRANSFERS\", \"GET_NFT_HISTORY\"],\n    description: \"Get NFT transfer history for a specific address or contract on eth.\",\n\n\n\n    // Fix the example data to match the interface\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me NFT transfers for contract [contract]0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258[/contract] [chain]eth[/chain] [fromtimestamp]1655197483[/fromtimestamp][totimestamp]1671974699[/totimestamp]\",\n                filters: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258\",\n                    pageSize: 5\n                }\n            } as GetNFTTransfersContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"NFT Transfers:\\n\\n\" +\n                      \"1. Transfer of Token #1234\\n\" +\n                      \"   From: 0xabcd...ef01\\n\" +\n                      \"   To: 0x9876...4321\\n\" +\n                      \"   Time: 1/24/2024, 10:30:15 AM\\n\" +\n                      \"   Token: CoolNFT #123\\n\\n\" +\n                      \"2. Transfer of Token #456\\n\" +\n                      \"   From: 0x9876...3210\\n\" +\n                      \"   To: 0xfedc...ba98\\n\" +\n                      \"   Time: 1/24/2024, 10:15:22 AM\\n\" +\n                      \"   Token: CoolNFT #456\\n\",\n                success: true,\n                data: {\n                    transfers: [\n                        {\n                            fromAddress: \"0xabcdef0123456789abcdef0123456789abcdef01\",\n                            toAddress: \"0x9876543210fedcba9876543210fedcba98765432\",\n                            contractAddress: \"0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258\",\n                            value: \"1\",\n                            valueRawInteger: \"1\",\n                            blockchain: \"eth\",\n                            tokenName: \"CoolNFT\",\n                            tokenSymbol: \"COOL\",\n                            tokenDecimals: 18,\n                            thumbnail: \"https://example.com/nft/123.png\",\n                            transactionHash: \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n                            blockHeight: 123456789,\n                            timestamp: 1706093415\n                        },\n                        {\n                            fromAddress: \"0x9876543210987654321098765432109876543210\",\n                            toAddress: \"0xfedcba9876543210fedcba9876543210fedcba98\",\n                            contractAddress: \"0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258\",\n                            value: \"1\",\n                            valueRawInteger: \"1\",\n                            blockchain: \"eth\",\n                            tokenName: \"CoolNFT\",\n                            tokenSymbol: \"COOL\",\n                            tokenDecimals: 18,\n                            thumbnail: \"https://example.com/nft/456.png\",\n                            transactionHash: \"0x9876543210fedcba9876543210fedcba9876543210fedcba9876543210fedcba\",\n                            blockHeight: 123456788,\n                            timestamp: 1706092522\n                        }\n                    ],\n                    syncStatus: {\n                        timestamp: 1706093415,\n                        lag: \"0s\",\n                        status: \"synced\"\n                    }\n                }\n            } as GetNFTTransfersContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_NFT_TRANSFERS_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_NFT_TRANSFERS_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetNFTTransfersContent;\n\n            if (!content.filters?.blockchain || !content.filters?.contractAddress) {\n                throw new ValidationError(\"Blockchain and contract address are required\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_NFT_TRANSFERS_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetNFTTransfersContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            console.log(\"Debug - Message content details:\", {\n                hasText: !!messageContent?.text,\n                hasFilters: !!messageContent?.filters,\n                textContent: messageContent?.text,\n                contentType: typeof messageContent?.text\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasContract: !!parsedContent.contract,\n                hasChain: !!parsedContent.chain,\n                hasFromTimestamp: !!parsedContent.fromTimestamp,\n                hasToTimestamp: !!parsedContent.toTimestamp,\n                contract: parsedContent.contract,\n                chain: parsedContent.chain,\n                fromTimestamp: parsedContent.fromTimestamp,\n                toTimestamp: parsedContent.toTimestamp,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['contract', 'chain', 'fromTimestamp', 'toTimestamp']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                address: parsedContent.contract,\n                blockchain: [parsedContent.chain],\n                fromTimestamp: parsedContent.fromTimestamp,\n                toTimestamp: parsedContent.toTimestamp\n            };\n\n            console.log(\"Debug - API request parameters:\", {\n                params: requestParams,\n                endpoint: ANKR_ENDPOINTS.production.multichain\n            });\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getTokenTransfers\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const transfers = response.data.result.transfers;\n\n                // Format the response text\n                let formattedText = \"Token Transfers:\\n\\n\";\n                transfers.forEach((transfer: NFTTransfer, index: number) => {\n                    formattedText += `${index + 1}. Transfer of ${transfer.tokenName} (${transfer.tokenSymbol})\\n`;\n                    formattedText += `   From: ${transfer.fromAddress.slice(0, 6)}...${transfer.fromAddress.slice(-4)}\\n`;\n                    formattedText += `   To: ${transfer.toAddress.slice(0, 6)}...${transfer.toAddress.slice(-4)}\\n`;\n                    formattedText += `   Amount: ${transfer.value}\\n`;\n                    formattedText += `   Time: ${new Date(transfer.timestamp * 1000).toLocaleString()}\\n`;\n                    formattedText += `   Tx Hash: ${transfer.transactionHash}\\n`;\n                    if (transfer.thumbnail) {\n                        formattedText += `   Token Icon: ${transfer.thumbnail}\\n`;\n                    }\n                    formattedText += \"\\n\";\n                });\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            transfers,\n                            syncStatus: response.data.result.syncStatus\n                        }\n                    } as GetNFTTransfersContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch NFT transfers: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch NFT transfers\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting NFT transfers: ${errorMessage}`,\n                    success: false\n                } as GetNFTTransfersContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_NFT_TRANSFERS_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetNFTTransfers;\n",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetNFTMetadata] ${message}`, data);\n        console.log(`[GetNFTMetadata] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetNFTMetadataContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        contractAddress?: string;\n        tokenId?: string;\n    };\n    success?: boolean;\n    data?: {\n        metadata: {\n            blockchain: string;\n            contractAddress: string;\n            contractType: string;\n            tokenId: string;\n        };\n        attributes: {\n            contractType: string;\n            tokenUrl: string;\n            imageUrl: string;\n            name: string;\n            description: string;\n            traits: Array<{\n                trait_type: string;\n                value: string;\n            }>;\n        };\n    };\n}\n\nexport const actionGetNFTMetadata: Action = {\n    name: \"GET_NFT_METADATA_ANKR\",\n    similes: [\"GET_NFT_INFO\", \"SHOW_NFT_DETAILS\", \"VIEW_NFT\", \"NFT_METADATA\"],\n    description: \"Get detailed metadata for a specific NFT including traits, images, and contract information.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me the metadata for NFT [token]1234[/token] at contract [contract]0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d[/contract] [chain]eth[/chain]\",\n                filters: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n                    tokenId: \"1234\"\n                }\n            } as GetNFTMetadataContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"NFT Metadata for Bored Ape #1234:\\n\\n\" +\n                      \"Collection: Bored Ape Yacht Club\\n\" +\n                      \"Contract: 0xbc4c...f13d (ERC721)\\n\\n\" +\n                      \"Description: A unique Bored Ape NFT living on the Ethereum blockchain\\n\\n\" +\n                      \"Traits:\\n\" +\n                      \"- Background: Blue\\n\" +\n                      \"- Fur: Dark Brown\\n\" +\n                      \"- Eyes: Bored\\n\" +\n                      \"- Mouth: Grin\\n\",\n                success: true,\n                data: {\n                    metadata: {\n                        blockchain: \"eth\",\n                        contractAddress: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n                        contractType: \"ERC721\",\n                        tokenId: \"1234\"\n                    },\n                    attributes: {\n                        contractType: \"ERC721\",\n                        tokenUrl: \"ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/1234\",\n                        imageUrl: \"ipfs://QmRRPWG96cmgTn2qSzjwr2qvfNEuhunv6FNeMFGa9bx6mQ\",\n                        name: \"Bored Ape #1234\",\n                        description: \"A unique Bored Ape NFT living on the Ethereum blockchain\",\n                        traits: [\n                            { trait_type: \"Background\", value: \"Blue\" },\n                            { trait_type: \"Fur\", value: \"Dark Brown\" },\n                            { trait_type: \"Eyes\", value: \"Bored\" },\n                            { trait_type: \"Mouth\", value: \"Grin\" }\n                        ]\n                    }\n                }\n            } as GetNFTMetadataContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_NFT_METADATA_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_NFT_METADATA_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetNFTMetadataContent;\n\n            if (!content.filters?.blockchain || !content.filters?.contractAddress || !content.filters?.tokenId) {\n                throw new ValidationError(\"Blockchain, contract address, and token ID are required\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_NFT_METADATA_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetNFTMetadataContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasContract: !!parsedContent.contract,\n                hasToken: !!parsedContent.token,\n                hasChain: !!parsedContent.chain,\n                contract: parsedContent.contract,\n                token: parsedContent.token,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['contract', 'token', 'chain']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: parsedContent.chain,\n                contractAddress: parsedContent.contract,\n                tokenId: parsedContent.token\n            };\n\n            console.log(\"Debug - API request parameters:\", {\n                params: requestParams,\n                endpoint: ANKR_ENDPOINTS.production.multichain\n            });\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getNFTMetadata\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const nftData = response.data.result;\n\n                // Format the response text\n                let formattedText = `NFT Metadata for ${nftData.attributes.name}:\\n\\n`;\n                formattedText += `Collection: ${nftData.attributes.name.split('#')[0].trim()}\\n`;\n                formattedText += `Contract: ${nftData.metadata.contractAddress.slice(0, 6)}...${nftData.metadata.contractAddress.slice(-4)} (${nftData.metadata.contractType})\\n\\n`;\n\n                if (nftData.attributes.description) {\n                    formattedText += `Description: ${nftData.attributes.description}\\n\\n`;\n                }\n\n                if (nftData.attributes.traits && nftData.attributes.traits.length > 0) {\n                    formattedText += \"Traits:\\n\";\n                    for (const trait of nftData.attributes.traits as { trait_type: string; value: string }[]) {\n                        formattedText += `- ${trait.trait_type}: ${trait.value}\\n`;\n                    }\n                }\n\n                if (nftData.attributes.imageUrl) {\n                    formattedText += `\\nImage URL: ${nftData.attributes.imageUrl}\\n`;\n                }\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: nftData\n                    } as GetNFTMetadataContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch NFT metadata: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch NFT metadata\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting NFT metadata: ${errorMessage}`,\n                    success: false\n                } as GetNFTMetadataContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_NFT_METADATA_ANKR action\");\n        }\n    },\n\n\n};\n\nexport default actionGetNFTMetadata;\n",
    "// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetNFTsByOwner] ${message}`, data);\n        console.log(`[GetNFTsByOwner] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetNFTsByOwnerContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string[];\n        walletAddress?: string;\n        pageSize?: number;\n        pageToken?: string;\n    };\n    success?: boolean;\n    data?: {\n        owner: string;\n        assets: Array<{\n            blockchain: string;\n            name: string;\n            tokenId: string;\n            tokenUrl: string;\n            imageUrl: string;\n            collectionName: string;\n            symbol: string;\n            contractType: string;\n            contractAddress: string;\n            quantity?: string;  // Added for ERC1155 support\n        }>;\n        syncStatus?: {\n            timestamp?: number;\n            lag?: string;\n            status?: string;\n        } | null;\n    };\n}\n\ntype NFTAsset = {\n    blockchain: string;\n    name: string;\n    tokenId: string;\n    tokenUrl: string;\n    imageUrl: string;\n    collectionName: string;\n    symbol: string;\n    contractType: string;\n    contractAddress: string;\n    quantity?: string;\n};\n\n// ------------------------------------------------------------------------------------------------\n// Core Action implementation\n// ------------------------------------------------------------------------------------------------\nexport const actionGetNFTsByOwner: Action = {\n    name: \"GET_NFTS_BY_OWNER_ANKR\",\n    similes: [\"LIST_NFTS\", \"SHOW_NFTS\", \"VIEW_NFTS\", \"FETCH_NFTS\", \"GET_OWNED_NFTS\"],\n    description: \"Retrieve all NFTs owned by a specific wallet address across multiple blockchains with detailed metadata.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me all NFTs owned by wallet [wallet]0x1234567890123456789012345678901234567890[/wallet] on [chain]eth[/chain]\",\n                filters: {\n                    blockchain: [\"eth\"],\n                    walletAddress: \"0x1234567890123456789012345678901234567890\",\n                    pageSize: 10\n                }\n            } as GetNFTsByOwnerContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"NFTs owned by 0x1234567890123456789012345678901234567890:\\n\\n\" +\n                      \"1. Bored Ape #1234\\n\" +\n                      \"   Collection: Bored Ape Yacht Club\\n\" +\n                      \"   Contract: 0xbc4c...f13d\\n\" +\n                      \"   Token ID: 1234\\n\\n\" +\n                      \"2. CryptoPunk #5678\\n\" +\n                      \"   Collection: CryptoPunks\\n\" +\n                      \"   Contract: 0x2505...42a2\\n\" +\n                      \"   Token ID: 5678\\n\",\n                success: true,\n                data: {\n                    owner: \"0x1234567890123456789012345678901234567890\",\n                    assets: [\n                        {\n                            blockchain: \"eth\",\n                            name: \"Bored Ape #1234\",\n                            tokenId: \"1234\",\n                            tokenUrl: \"ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/1234\",\n                            imageUrl: \"ipfs://QmRRPWG96cmgTn2qSzjwr2qvfNEuhunv6FNeMFGa9bx6mQ\",\n                            collectionName: \"Bored Ape Yacht Club\",\n                            symbol: \"BAYC\",\n                            contractType: \"ERC721\",\n                            contractAddress: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\"\n                        },\n                        {\n                            blockchain: \"eth\",\n                            name: \"CryptoPunk #5678\",\n                            tokenId: \"5678\",\n                            tokenUrl: \"https://cryptopunks.app/cryptopunks/details/5678\",\n                            imageUrl: \"https://cryptopunks.app/cryptopunks/image/5678\",\n                            collectionName: \"CryptoPunks\",\n                            symbol: \"PUNK\",\n                            contractType: \"ERC721\",\n                            contractAddress: \"0x2505...42a2\"\n                        }\n                    ]\n                }\n            } as GetNFTsByOwnerContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_NFTS_BY_OWNER_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_NFTS_BY_OWNER_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetNFTsByOwnerContent;\n\n            if (!content.filters?.blockchain || !content.filters?.walletAddress) {\n                throw new ValidationError(\"Blockchain and wallet address are required\");\n            }\n\n            if (content.filters?.blockchain && !Array.isArray(content.filters.blockchain)) {\n                throw new ValidationError(\"Blockchain must be an array\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_NFTS_BY_OWNER_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetNFTsByOwnerContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_API_KEY,\n                env: config.ANKR_ENV\n            });\n            const wallet = config.ANKR_API_KEY;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_API_KEY not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasWallet: !!parsedContent.wallet,\n                hasChain: !!parsedContent.chain,\n                wallet: parsedContent.wallet,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['wallet', 'chain']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: [parsedContent.chain],  // API expects array\n                walletAddress: parsedContent.wallet,\n                pageSize: messageContent.filters?.pageSize ?? 10,\n                pageToken: messageContent.filters?.pageToken\n            };\n\n            console.log(\"Debug - API request parameters:\", requestParams);\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getNFTsByOwner\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const { owner, assets, syncStatus } = response.data.result;\n\n                // Format the response text\n                let formattedText = `NFTs owned by ${owner}:\\n\\n`;\n\n                for (const [index, nft] of (assets as NFTAsset[]).entries()) {\n                    formattedText += `${index + 1}. ${nft.name || 'Unnamed NFT'}\\n`;\n                    if (nft.collectionName) {\n                        formattedText += `   Collection: ${nft.collectionName}\\n`;\n                    }\n                    formattedText += `   Contract: ${nft.contractAddress.slice(0, 6)}...${nft.contractAddress.slice(-4)} (${nft.contractType})\\n`;\n                    formattedText += `   Token ID: ${nft.tokenId}\\n`;\n                    if (nft.quantity) {\n                        formattedText += `   Quantity: ${nft.quantity}\\n`;\n                    }\n                    if (nft.tokenUrl) {\n                        formattedText += `   Metadata URL: ${nft.tokenUrl}\\n`;\n                    }\n                    formattedText += '\\n';\n                }\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            owner,\n                            assets,\n                            syncStatus\n                        }\n                    } as GetNFTsByOwnerContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch NFTs data: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch NFTs data\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting NFTs: ${errorMessage}`,\n                    success: false\n                } as GetNFTsByOwnerContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_NFTS_BY_OWNER_ANKR action\");\n        }\n    },\n\n\n};\n\nexport default actionGetNFTsByOwner;\n\n"
  ],
  "mappings": "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",
  "names": [
    "config",
    "elizaLogger",
    "elizaLogger",
    "_a",
    "_b",
    "config",
    "elizaLogger",
    "axios",
    "config",
    "GRANULAR_LOG",
    "logGranular",
    "elizaLogger",
    "_a",
    "_b",
    "axios",
    "elizaLogger",
    "axios",
    "config",
    "GRANULAR_LOG",
    "logGranular",
    "elizaLogger",
    "_a",
    "_b",
    "axios",
    "elizaLogger",
    "axios",
    "config",
    "GRANULAR_LOG",
    "logGranular",
    "elizaLogger",
    "_a",
    "_b",
    "axios",
    "elizaLogger",
    "axios",
    "config",
    "GRANULAR_LOG",
    "logGranular",
    "elizaLogger",
    "_a",
    "_b",
    "axios",
    "elizaLogger",
    "axios",
    "config",
    "GRANULAR_LOG",
    "logGranular",
    "elizaLogger",
    "_a",
    "_b",
    "axios",
    "elizaLogger",
    "axios",
    "config",
    "GRANULAR_LOG",
    "logGranular",
    "elizaLogger",
    "_a",
    "_b",
    "axios",
    "elizaLogger",
    "axios",
    "config",
    "GRANULAR_LOG",
    "logGranular",
    "elizaLogger",
    "_a",
    "_b",
    "axios",
    "elizaLogger",
    "axios",
    "config",
    "GRANULAR_LOG",
    "logGranular",
    "elizaLogger",
    "_a",
    "_b",
    "axios",
    "elizaLogger",
    "axios",
    "config",
    "GRANULAR_LOG",
    "logGranular",
    "elizaLogger",
    "_a",
    "_b",
    "axios",
    "elizaLogger",
    "axios",
    "config",
    "GRANULAR_LOG",
    "logGranular",
    "elizaLogger",
    "_a",
    "_b",
    "axios",
    "elizaLogger",
    "axios",
    "config",
    "GRANULAR_LOG",
    "logGranular",
    "elizaLogger",
    "_a",
    "_b",
    "axios",
    "elizaLogger",
    "axios",
    "config",
    "GRANULAR_LOG",
    "logGranular",
    "elizaLogger",
    "_a",
    "_b",
    "axios"
  ]
}
